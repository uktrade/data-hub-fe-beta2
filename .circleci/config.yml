version: 2
aliases:
  - &node_version               node:8.11.1
  - &redis_version              redis:3.2.10
  - &postgres_version           postgres:9.5
  - &elasticsearch_version      elasticsearch:5.5
  - &oauth2_dit_staff_token     ditStaffToken
  - &oauth2_da_staff_token      daStaffToken
  - &oauth2_lep_staff_token     lepStaffToken
  - &oauth2_policy_staff_token  policyFeedbackStaffToken

  # Common steps
  - &restore_yarn_cache
    restore_cache:
      name: Restore yarn dependencies cache
      key: yarn-dependency-{{ checksum "package.json" }}

  # Configuration shared between user_acceptance* jobs
  - &at_container_config
    working_directory: ~/data-hub-frontend
    environment:
      BASH_ENV: "/usr/local/nvm/nvm.sh"  # make node, npm and yarn available

  # Common steps for user_acceptance* jobs
  - &wait_for_backend
    run:
      name: Wait for backend
      command: dockerize -wait ${API_ROOT}/admin/ -timeout 300s

  # Wait for mock-sso to report OK
  - &wait_for_mock_sso
    run:
      name: Wait for mock sso
      command: dockerize -wait ${MOCK_SSO_ROOT}/healthcheck -timeout 60s

  # Start frontend
  - &start_frontend
    run:
      name: Start data hub frontend
      command: yarn start
      background: true

  # Wait for frontend to report OK
  - &wait_for_frontend
    run:
      name: Wait for data hub frontend
      command: dockerize -wait ${QA_HOST}/healthcheck -timeout 60s

  # Create required cucumber directories
  - &create_cucumber_dirs
    run:
      name: Create cucumber directories
      command: mkdir -p ~/data-hub-frontend/cucumber/{reports,screenshots}

  # Create cucumber reports
  - &create_at_reports
    run:
      name: Create acceptance test reports
      command: |
        node ~/data-hub-frontend/.circleci/scripts/cucumber-report.js
        ~/data-hub-frontend/.circleci/scripts/rename-reports.sh
        ~/data-hub-frontend/.circleci/scripts/copy-screenshots.sh
      when: always

  # Store cucumber results in circleCi
  - &store_test_results
    store_test_results:
      path: cucumber

  # Store cucumber artifacts in circleCi
  - &store_test_artifacts
    store_artifacts:
      path: cucumber

  # Data hub base environment variables
  - &data_hub_base_envs
    API_ROOT: http://localhost:8000
    MOCK_SSO_ROOT: http://localhost:8080
    QA_HOST: http://localhost:3000
    QA_SELENIUM_HOST: 127.0.0.1
    QA_SELENIUM_PORT: 4444
    REDIS_HOST: localhost
    TZ: "/usr/share/zoneinfo/Europe/London"
    LOG_LEVEL: debug
    OAUTH2_TOKEN_FETCH_URL: http://localhost:8080/o/token
    OAUTH2_AUTH_URL: http://localhost:8080/o/authorize
    OAUTH2_REDIRECT_URL: http://localhost:3000/oauth/callback
    OAUTH2_CLIENT_SECRET: youAintSeenMyRight
    OAUTH2_CLIENT_ID: randomClientId
    ARCHIVED_DOCUMENTS_BASE_URL: http://example-documents-url.io
    OAUTH2_DEV_TOKEN: *oauth2_dit_staff_token

  # Data hub base docker container
  - &docker_data_hub_base
    image: ukti/docker-data-hub-base
    environment:
      *data_hub_base_envs

  # Data hub redis container
  - &docker_redis
    image: *redis_version

  # Data hub backend elasticsearch container
  - &docker_elasticsearch
    image: *elasticsearch_version

  # Data hub backend postgres container
  - &docker_postgres
    image: *postgres_version
    name: postgres
    environment:
      POSTGRES_DB: datahub

  # Mock SSO container used by Data hub frontend
  - &docker_mock_sso
    image: ukti/mock-sso
    environment:
      - MOCK_SSO_SCOPE: 'data-hub:internal-front-end'

  # Data hub backend
  - &docker_data_hub_backend
    image: ukti/data-hub-leeloo
    command: ./setup-uat.sh
    environment:
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: foo
      AWS_SECRET_ACCESS_KEY: bar
      CDMS_AUTH_URL: http://example.com
      DATABASE_URL: postgresql://postgres@postgres/datahub
      DATAHUB_SECRET: secret
      DEBUG: 'True'
      DOCUMENTS_BUCKET: baz
      DJANGO_SECRET_KEY: topSecret
      DJANGO_SETTINGS_MODULE: config.settings.local
      ES_INDEX: test_index
      ES5_URL: http://localhost:9200
      POSTGRES_URL: tcp://postgres:5432
      SSO_ENABLED: 'True'
      RESOURCE_SERVER_INTROSPECTION_URL: http://localhost:8080/o/introspect  # required but not used as user with token has been created in backend setup script
      RESOURCE_SERVER_AUTH_TOKEN: sso-token

  # Non master branch Common workflow config
  - &common_at_workflow_config
    requires:
      - dependencies
      - lint_code
      - unit_tests
      - vue_tests
    filters:
      branches:
        ignore:
          - master
          - /^skip-tests.*/
          - /^release.*/

  # Master branch common workflow config
  - &master_common_at_workflow_config
    requires:
      - dependencies
      - lint_code
      - unit_tests
      - vue_tests
    filters:
      branches:
        only:
          - master
          - /^release.*/
jobs:
  # Save yarn dependencies to cache
  dependencies:
    docker:
      - image: *node_version
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - *restore_yarn_cache
      - run: yarn install
      - run: yarn add wavy  # explicitly install wavy module
      - save_cache:
          name: Save yarn dependencies cache
          key: yarn-dependency-{{ checksum "package.json" }}
          paths:
            - ~/data-hub-frontend/node_modules

  # Run linting jobs
  lint_code:
    docker:
      - image: *node_version
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - *restore_yarn_cache
      - run:
          name: Lint code
          command: |
            mkdir -p reports
            yarn lint:all:js -- --format junit --output-file reports/eslint.xml
            yarn lint:all:styles
          when: always
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports

  # Run unit tests and store results
  unit_tests:
    docker:
      - image: *node_version
        environment:
          TZ: "/usr/share/zoneinfo/Europe/London"
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - *restore_yarn_cache
      - run:
          name: Run unit tests
          command: |
            mkdir junit
            yarn build
            yarn circle:unit
          environment:
            MOCHA_FILE: junit/test-results.xml
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage

  # Run vue unit tests and store results
  vue_tests:
    docker:
      - image: *node_version
        environment:
          TZ: "/usr/share/zoneinfo/Europe/London"
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - *restore_yarn_cache
      - run:
          name: Run vue tests
          command: |
            mkdir junit
            yarn build
            yarn circle:vue
          environment:
            MOCHA_FILE: junit/test-results.xml
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit

  # Run acceptance tests for DIT staff
  dit_staff_at: &dit_staff_at
    <<: *at_container_config
    docker:
      - *docker_data_hub_base
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend
    parallelism: 6
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn build
      - *start_frontend
      - *wait_for_frontend
      - run:
          name: Split tests for parallelisation
          command: |
            # split .features for parallelisation
            FEATURES="$(circleci tests glob "test/acceptance/features/**/*.feature" | circleci tests split)"

            # move groups of .features to folder
            mkdir -p ~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}
            for featureFile in ${FEATURES}; do
              FILENAME_WITH_FOLDER=$(basename $(dirname $featureFile))-$(basename $featureFile)
              mv "$featureFile" ~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}/${FILENAME_WITH_FOLDER}
              printf "including: $(basename $FILENAME_WITH_FOLDER)\n"
            done

            # assign .features folder name to env to pass to cucumber.js
            export FEATURES_FOLDER=~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}
            printf "Features folder created - ${FEATURES_FOLDER}\n"

            # create cucumber directories
            mkdir -p ~/data-hub-frontend/cucumber/{reports,screenshots}

            # run acceptance tests
            yarn circle:acceptance:dit-staff
          when: always
      - *create_at_reports
      - *store_test_results
      - *store_test_artifacts

  # Run acceptance tests for LEP staff
  lep_staff_at: &lep_staff_at
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_lep_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn build
      - *start_frontend
      - *wait_for_frontend
      - *create_cucumber_dirs
      - run:
          name: Run LEP acceptance tests
          command: yarn circle:acceptance:lep-staff
      - *create_at_reports
      - *store_test_results
      - *store_test_artifacts

  # Run acceptance tests for DA staff
  da_staff_at: &da_staff_at
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_da_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn build
      - *start_frontend
      - *wait_for_frontend
      - *create_cucumber_dirs
      - run:
          name: Run LEP acceptance tests
          command: yarn circle:acceptance:da-staff
      - *create_at_reports
      - *store_test_results
      - *store_test_artifacts

  # Run acceptance tests for policy feedback staff
  policy_staff_at: &policy_staff_at
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_policy_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn build
      - *start_frontend
      - *wait_for_frontend
      - *create_cucumber_dirs
      - run:
          name: Run policy feedback acceptance tests
          command: yarn circle:acceptance:policy-staff
      - *create_at_reports
      - *store_test_results
      - *store_test_artifacts

  # Run acceptance tests for DIT staff using the master version of the backend
  master-dit_staff_at:
    <<: *dit_staff_at
    docker:
      - *docker_data_hub_base
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - <<: *docker_data_hub_backend
        image: ukti/data-hub-leeloo:master

  # Run acceptance tests for LEP staff using the master version of the backend
  master-lep_staff_at:
    <<: *lep_staff_at
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_lep_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - <<: *docker_data_hub_backend
        image: ukti/data-hub-leeloo:master

  # Run acceptance tests for DA staff using the master version of the backend
  master-da_staff_at:
    <<: *da_staff_at
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_da_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - <<: *docker_data_hub_backend
        image: ukti/data-hub-leeloo:master

  # Run acceptance tests for Policy staff using the master version of the backend
  master-policy_staff_at:
    <<: *policy_staff_at
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_policy_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mock_sso
      - <<: *docker_data_hub_backend
        image: ukti/data-hub-leeloo:master

# CircleCi workflows
workflows:
  version: 2
  datahub:
    jobs:
      - dependencies
      - lint_code:
          requires:
            - dependencies
      - unit_tests:
          requires:
            - dependencies
      - vue_tests:
          requires:
            - dependencies
      - dit_staff_at: *common_at_workflow_config
      - da_staff_at: *common_at_workflow_config
      - lep_staff_at: *common_at_workflow_config
      - policy_staff_at: *common_at_workflow_config
      - master-dit_staff_at: *master_common_at_workflow_config
      - master-da_staff_at: *master_common_at_workflow_config
      - master-lep_staff_at: *master_common_at_workflow_config
      - master-policy_staff_at: *master_common_at_workflow_config

# Webhook for geckoboard heroku app
notify:
  webhooks:
    - url: https://data-hub-circleci-geckoboard.herokuapp.com/parse-payload
