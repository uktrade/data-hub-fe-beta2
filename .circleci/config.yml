## TODO discover why the wavy package is causing us problems and why we need to yarn add wavy with a fresh install

version: 2
aliases:
  - &node_version         node:8.5.0
  - &qa_user_email        circleci@datahub.com
  - &oauth2_dev_token     topSecretSquirrel

jobs:
  # greenkeeper lockfile job
  lockfile:
     docker:
       - image: *node_version
     working_directory: ~/data-hub-frontend
     steps:
       - checkout
       - restore_cache:
           name: Restore yarn dependencies cache
           key: cache-lockfile-{{ checksum "package.json" }}
       - run: yarn global add greenkeeper-lockfile@1
       - run: greenkeeper-lockfile-update
       - run: greenkeeper-lockfile-upload
       - save_cache:
          name: Save yarn dependencies cache
          key: cache-lockfile-{{ checksum "package.json" }}
          paths:
            - ~/.cache/yarn

  # Save yarn dependencies to cache to be used in later job
  build:
    docker:
      - image: *node_version
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - restore_cache:
          name: Restore yarn dependencies cache
          key: yarn-dependency-{{ checksum "package.json" }}
      - run: yarn install
      - run: yarn add wavy # wavy module does not install correctly after a fresh yarn install, this causes Unit tests to fail
      - save_cache:
          name: Save yarn dependencies cache
          key: yarn-dependency-{{ checksum "package.json" }}
          paths:
            - ~/data-hub-frontend/node_modules

  # Run linting jobs
  lint_code:
    docker:
      - image: *node_version
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - restore_cache:
          name: Restore yarn dependencies cache
          key: yarn-dependency-{{ checksum "package.json" }}
      - run:
          name: Lint code
          command: |
            mkdir -p reports
            yarn lint:all:js -- --format junit --output-file reports/eslint.xml
            yarn lint:all:styles
          when: always
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports

  # Run unit tests and store results
  unit_tests:
    docker:
      - image: *node_version
        environment:
          TZ: "/usr/share/zoneinfo/Europe/London"
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - restore_cache:
          name: Restore yarn dependencies cache
          key: yarn-dependency-{{ checksum "package.json" }}
      - run:
          name: Run unit tests
          command: |
            mkdir junit
            yarn build
            yarn circle:unit
          environment:
            MOCHA_FILE: junit/test-results.xml
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage

  # Run acceptance tests
  user_acceptance_tests: &user_acceptance_tests
    environment:
      BASH_ENV: "/usr/local/nvm/nvm.sh" # make node, npm and yarn commands available in run command
    docker:
      - &docker_dat_hub_base
        image: ukti/docker-data-hub-base
        environment:
          - API_ROOT: http://localhost:8000
          - MOCK_SSO_ROOT: http://localhost:8080
          - QA_HOST: http://localhost:3000
          - QA_SELENIUM_HOST: 127.0.0.1
          - QA_SELENIUM_PORT: 4444
          - QA_USER_EMAIL: *qa_user_email
          - REDIS_HOST: localhost
          - TZ: "/usr/share/zoneinfo/Europe/London"
          - LOG_LEVEL: debug
          - OAUTH2_DEV_TOKEN: *oauth2_dev_token
          - OAUTH2_TOKEN_FETCH_URL: http://localhost:8080/o/token
          - OAUTH2_AUTH_URL: http://localhost:8080/o/authorize
          - OAUTH2_REDIRECT_URL: http://localhost:3000/oauth/callback
          - OAUTH2_CLIENT_SECRET: youAintSeenMyRight
          - OAUTH2_CLIENT_ID: randomClientId
          - ARCHIVED_DOCUMENTS_BASE_URL: http://example-documents-url.io
      - &docker_redis
        image: redis:3.2.10
      - &docker_elasticsearch
        image: elasticsearch:5.5
      - &docker_postgres
        image: postgres:9.5
        name: postgres
        restart: always
        environment:
          POSTGRES_DB: datahub
      - &docker_data_hub_leeloo
        image: ukti/data-hub-leeloo
        command: ./setup-uat.sh
        environment:
          - AWS_DEFAULT_REGION: eu-west-2
          - AWS_ACCESS_KEY_ID: foo
          - AWS_SECRET_ACCESS_KEY: bar
          - CDMS_AUTH_URL: http://example.com
          - DATABASE_URL: postgresql://postgres@postgres/datahub
          - DATAHUB_SECRET: secret
          - DEBUG: True
          - DOCUMENTS_BUCKET: baz
          - DJANGO_SECRET_KEY: topSecret
          - DJANGO_SETTINGS_MODULE: config.settings.local
          - ES_INDEX: test_index
          - ES5_URL: http://localhost:9200
          - POSTGRES_URL: tcp://postgres:5432
          - SSO_ENABLED: 'True'
          - RESOURCE_SERVER_INTROSPECTION_URL: http://localhost:8080/o/introspect # required but not used as user has been created in backend
          - RESOURCE_SERVER_AUTH_TOKEN: sso-token
          - QA_USER_EMAIL: *qa_user_email
          - OAUTH2_DEV_TOKEN: *oauth2_dev_token
      - &mock-sso
        image: ukti/mock-sso
        environment:
          - MOCK_SSO_SCOPE: 'data-hub:internal-front-end'
    parallelism: 6
    working_directory: ~/data-hub-frontend
    steps:
      - checkout
      - run:
          name: Wait for data hub leeloo
          command: dockerize -wait ${API_ROOT}/admin/ -timeout 240s
      - run:
          name: Wait for mock sso
          command: dockerize -wait ${MOCK_SSO_ROOT}/healthcheck -timeout 60s
      - restore_cache:
          name: Restore yarn dependencies cache
          key: yarn-dependency-{{ checksum "package.json" }}
      - run: yarn build
      - run:
          name: Start data hub frontend
          command: yarn start
          background: true
      - run:
          name: Wait for data hub frontend
          command: dockerize -wait ${QA_HOST}/healthcheck -timeout 60s
      - run:
          name: Split tests for parallelisation and then run acceptance tests
          command: |
            # split .features for parallelisation
            FEATURES="$(circleci tests glob "test/acceptance/features/**/*.feature" | circleci tests split)"

            # move groups of .features to folder
            mkdir -p ~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}
            for featureFile in ${FEATURES}; do
              FILENAME_WITH_FOLDER=$(basename $(dirname $featureFile))-$(basename $featureFile)
              mv "$featureFile" ~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}/${FILENAME_WITH_FOLDER}
              printf "including: $(basename $FILENAME_WITH_FOLDER)\n"
            done

            # assign .features folder name to env to pass to cucumber.js
            export FEATURES_FOLDER=~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}
            printf "Features folder created - ${FEATURES_FOLDER}\n"

            # run acceptance tests
            mkdir -p ~/data-hub-frontend/cucumber/{reports,screenshots}
            yarn circle:acceptance
          when: always
      - run:
          name: Create acceptance test reports
          command: |
            node ~/data-hub-frontend/.circleci/scripts/cucumber-report.js
            ~/data-hub-frontend/.circleci/scripts/rename-reports.sh
            ~/data-hub-frontend/.circleci/scripts/copy-screenshots.sh
          when: always
      - store_test_results:
          path: cucumber
      - store_artifacts:
          path: cucumber

  # Run acceptance tests using master docker version of the backend
  user_acceptance_tests_master:
    <<: *user_acceptance_tests
    docker:
      - *docker_dat_hub_base
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - <<: *docker_data_hub_leeloo
        image: ukti/data-hub-leeloo:master
      - *mock-sso

workflows:
  version: 2
  datahub:
    jobs:
      - lockfile
      - build:
          requires:
            - lockfile
      - lint_code:
          requires:
            - lockfile
            - build
      - unit_tests:
          requires:
            - lockfile
            - build
      - user_acceptance_tests:
          requires:
            - lockfile
            - build
            - lint_code
            - unit_tests
          filters:
            branches:
              ignore:
                - master
                - /^skip-tests.*/
                - /^release.*/
      - user_acceptance_tests_master:
          requires:
            - lockfile
            - build
            - lint_code
            - unit_tests
          filters:
            branches:
              only:
                - master
                - /^release.*/

# Webhook for geckoboard heroku app
notify:
  webhooks:
    - url: https://data-hub-circleci-geckoboard.herokuapp.com/parse-payload

