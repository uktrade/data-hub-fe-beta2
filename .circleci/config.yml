version: 2 # Do not upgrade to 2.1 until CircleCI CLI supports it
aliases:
  - &redis_version              redis:3.2.10
  - &postgres_version           postgres:10
  - &mi_postgres_version        postgres:9.6
  - &elasticsearch_version      docker.elastic.co/elasticsearch/elasticsearch:6.8.2
  - &oauth2_dit_staff_token     ditStaffToken
  - &oauth2_da_staff_token      daStaffToken
  - &oauth2_lep_staff_token     lepStaffToken
  - &api_develop_image          quay.io/uktrade/data-hub-api:develop
  - &api_master_image           quay.io/uktrade/data-hub-api:master

  # Common steps
  - &restore_yarn_cache
    restore_cache:
      name: Restore yarn dependencies cache
      key: yarn-dependency-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

  # Configuration shared between user_acceptance* jobs
  - &at_container_config
    working_directory: ~/data-hub-frontend

  # Common steps for user_acceptance* jobs
  - &wait_for_backend
    run:
      name: Wait for backend
      command: dockerize -wait ${API_ROOT}/admin/ -timeout 300s

  # Wait for mock-sso to report OK
  - &wait_for_mock_sso
    run:
      name: Wait for mock sso
      command: dockerize -wait ${MOCK_SSO_ROOT}/healthcheck -timeout 60s

  # Start frontend
  - &start_frontend
    run:
      name: Start data hub frontend
      command: yarn start
      background: true

  # Wait for frontend to report OK
  - &wait_for_frontend
    run:
      name: Wait for data hub frontend
      command: dockerize -wait ${QA_HOST}/healthcheck -timeout 180s

  # Start sandbox
  - &start_api_sandbox
    run:
      name: Start API sandbox
      command: java -jar /usr/local/sandbox.jar --port=8001 --watch=false --base=./test/sandbox run
      background: true

  # Wait for api sandbox to report OK
  - &wait_for_api_sandbox
    run:
      name: Wait for api sandbox
      command: dockerize -wait ${API_ROOT}/ping.xml -timeout 120s

  # Create required cucumber directories
  - &create_cucumber_dirs
    run:
      name: Create cucumber directories
      command: mkdir -p ~/data-hub-frontend/cucumber/{reports,screenshots}

  # Create cucumber reports
  - &create_at_reports
    run:
      name: Create acceptance test reports
      command: |
        node ~/data-hub-frontend/.circleci/scripts/cucumber-report.js
        ~/data-hub-frontend/.circleci/scripts/rename-reports.sh
        ~/data-hub-frontend/.circleci/scripts/copy-screenshots.sh
      when: always

  # Store cucumber results in circleCi
  - &store_test_results
    store_test_results:
      path: cucumber

  # Store cucumber artifacts in circleCi
  - &store_test_artifacts
    store_artifacts:
      path: cucumber

  # Data hub base environment variables
  - &data_hub_base_envs
    API_ROOT: http://localhost:8000
    MOCK_SSO_ROOT: http://localhost:8080
    QA_HOST: http://localhost:3000
    QA_SELENIUM_HOST: 127.0.0.1
    QA_SELENIUM_PORT: 4444
    REDIS_HOST: localhost
    LOG_LEVEL: debug
    OAUTH2_TOKEN_FETCH_URL: http://localhost:8080/o/token
    OAUTH2_USER_PROFILE_URL: http://localhost:8080/api/v1/user/me
    OAUTH2_AUTH_URL: http://localhost:8080/o/authorize
    OAUTH2_REDIRECT_URL: http://localhost:3000/oauth/callback
    OAUTH2_CLIENT_SECRET: youAintSeenMyRight
    OAUTH2_CLIENT_ID: randomClientId
    ARCHIVED_DOCUMENTS_BASE_URL: http://example-documents-url.io
    OAUTH2_DEV_TOKEN: *oauth2_dit_staff_token
    SESSION_SECRET: theStrongestAvenger
    HELP_CENTRE_URL: https://datahub-helpcentre.london.cloudapps.digital
    HELP_CENTRE_ANNOUNCMENTS_URL: https://datahub-helpcentre.london.cloudapps.digital/updates/announcements
    HELP_CENTRE_API_FEED: https://datahub-helpcentre.london.cloudapps.digital/api/feeds/announcements
    DATA_HUB_BACKEND_ACCESS_KEY_ID: frontend-key-id
    DATA_HUB_BACKEND_SECRET_ACCESS_KEY: frontend-key

  - &data_hub_functional_envs
    API_ROOT: http://localhost:8001
    QA_HOST: http://localhost:3000
    LOG_LEVEL: debug
    REDIS_HOST: localhost
    MOCK_SSO_ROOT: http://localhost:8080
    OAUTH2_TOKEN_FETCH_URL: http://localhost:8080/o/token
    OAUTH2_USER_PROFILE_URL: http://localhost:8080/api/v1/user/me
    OAUTH2_AUTH_URL: http://localhost:8080/o/authorize
    OAUTH2_REDIRECT_URL: http://localhost:3000/oauth/callback
    OAUTH2_CLIENT_SECRET: youAintSeenMyRight
    OAUTH2_CLIENT_ID: randomClientId
    OAUTH2_DEV_TOKEN: ditStaffToken
    OAUTH2_BYPASS_SSO: true
    CACHE_ASSETS: "true"
    HELP_CENTRE_API_FEED: http://localhost:8001/help-centre/announcement
    HELP_CENTRE_FEED_API_TOKEN: apiToken
    SESSION_SECRET: theStrongestAvenger
    DATA_HUB_BACKEND_ACCESS_KEY_ID: frontend-key-id
    DATA_HUB_BACKEND_SECRET_ACCESS_KEY: frontend-key

  # Data hub base docker container
  - &docker_data_hub_base
    image: ukti/data-hub-frontend-test:3.1.0
    environment:
      *data_hub_base_envs

  # Data hub redis container
  - &docker_redis
    image: *redis_version

  # Data hub backend elasticsearch container
  - &docker_elasticsearch
    image: *elasticsearch_version

  # Data hub backend postgres container
  - &docker_postgres
    image: *postgres_version
    name: postgres
    environment:
      POSTGRES_DB: datahub

  # Data hub mi dashboard postgres container
  - &docker_mi_postgres
    image: *mi_postgres_version
    name: mi-postgres
    environment:
      POSTGRES_DB: mi

  # Mock SSO container used by Data hub frontend
  - &docker_mock_sso
    image: quay.io/uktrade/mock-sso:latest
    environment:
      - MOCK_SSO_SCOPE: 'data-hub:internal-front-end'
      - MOCK_SSO_TOKEN: 123

  # Data hub backend
  - &docker_data_hub_backend_base
    image: *api_develop_image
    environment:
      AWS_DEFAULT_REGION: eu-west-2
      AWS_ACCESS_KEY_ID: foo
      AWS_SECRET_ACCESS_KEY: bar
      DATABASE_URL: postgresql://postgres@postgres/datahub
      MI_DATABASE_URL: postgresql://postgres@mi-postgres/mi
      DEBUG: 'False'
      DEFAULT_BUCKET: baz
      DJANGO_SECRET_KEY: topSecret
      DJANGO_SETTINGS_MODULE: config.settings.local
      ENABLE_CELERY_ES_SYNC_OBJECT: 'True'
      ES_INDEX_PREFIX: test_index
      ES5_URL: http://localhost:9200
      POSTGRES_URL: tcp://postgres:5432
      MI_POSTGRES_URL: tcp://mi-postgres:5432
      REDIS_BASE_URL: redis://localhost:6379
      REDIS_CACHE_DB: 5
      REDIS_CELERY_DB: 6
      SSO_ENABLED: 'True'
      RESOURCE_SERVER_INTROSPECTION_URL: http://localhost:8080/o/introspect  # required but not used as user with token has been created in backend setup script
      RESOURCE_SERVER_AUTH_TOKEN: sso-token
      WEB_CONCURRENCY: 2
      ACTIVITY_STREAM_ACCESS_KEY_ID: some-id
      ACTIVITY_STREAM_SECRET_ACCESS_KEY: some-secret
      DISABLE_PAAS_IP_CHECK: 'True'
      DATA_HUB_FRONTEND_ACCESS_KEY_ID: frontend-key-id
      DATA_HUB_FRONTEND_SECRET_ACCESS_KEY: frontend-key
      ADMIN_OAUTH2_ENABLED: 'False'

  - &docker_data_hub_backend_api
    <<: *docker_data_hub_backend_base
    command: ./setup-uat.sh

  - &docker_data_hub_backend_celery
    <<: *docker_data_hub_backend_base
    # Note: By default Celery will default to the number of CPU cores, which can be a large number on CircleCI like 36
    # which then ends up causing out-of-memory errors
    command: celery worker -A config -l info -Q celery,long-running --concurrency 3

  # Non master branch Common workflow config
  - &common_at_workflow_config
    requires:
      - dependencies
      - lint_code
      - unit_tests
      - unit_client_tests
      - functional_tests
    filters:
      branches:
        ignore:
          - master
          - /^skip-tests.*/
          - /^release.*/

  # Master branch common workflow config
  - &master_common_at_workflow_config
    requires:
      - dependencies
      - lint_code
      - unit_tests
      - unit_client_tests
      - functional_tests
    filters:
      branches:
        only:
          - master
          - /^release.*/
jobs:
  # Save yarn dependencies to cache
  dependencies:
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
    steps:
      - checkout
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - save_cache:
          name: Save yarn dependencies cache
          key: yarn-dependency-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/data-hub-frontend/node_modules
            - /root/.cache/Cypress

  # Run linting jobs
  lint_code:
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
    steps:
      - checkout
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - run:
          name: Lint code
          command: |
            mkdir -p reports
            yarn lint:all:js -- --format junit --output-file reports/eslint.xml
            yarn lint:all:styles
          when: always
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports

  # Run unit tests and store results
  unit_tests:
    <<: *at_container_config
    docker:
      - *docker_data_hub_base
    steps:
      - checkout
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - run:
          name: Run unit tests
          command: |
            mkdir junit
            yarn circle:unit
          environment:
            MOCHA_FILE: junit/test-results.xml
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - run:
          name: Publish coverage to Codecov
          command: bash <(curl -s https://codecov.io/bash)

  # Run unit client tests and store results
  unit_client_tests:
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
    steps:
      - checkout
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - run: yarn build:prod
      - run:
          name: Run client-side unit tests
          command: |
            mkdir junit
            yarn circle:unit-client
          environment:
            MOCHA_FILE: junit/test-results.xml
          when: always
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage

# Run functional tests
  functional_tests:
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment: *data_hub_functional_envs
      - *docker_redis
      - *docker_mock_sso
    parallelism: 9
    steps:
      - checkout
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - *start_api_sandbox
      - *wait_for_api_sandbox
      - run: yarn install --pure-lockfile
      - run: yarn build:prod
      - *start_frontend
      - *wait_for_frontend
      - run:
          name: Run functional tests
          command: yarn test:functional --browser chrome --parallel --record --key $CYPRESS_DASHBOARD_KEY
          when: always
      - store_artifacts:
          path: cypress/screenshots

# Run visual tests
  visual_tests:
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment: *data_hub_functional_envs
      - *docker_redis
      - *docker_mock_sso
    steps:
      - checkout
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - *start_api_sandbox
      - *wait_for_api_sandbox
      - run: yarn install --pure-lockfile
      - run: yarn build:prod
      - *start_frontend
      - *wait_for_frontend
      - run:
          name: Run visual tests
          command: yarn test:visual
          when: always
      - store_artifacts:
          path: visual-screenshots
      - store_artifacts:
          path: visual-report

  # Run acceptance tests for DIT staff
  dit_staff_at: &dit_staff_at
    <<: *at_container_config
    docker:
      - *docker_data_hub_base
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mi_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend_api
      - *docker_data_hub_backend_celery
    parallelism: 1
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - run: yarn build:prod
      - *start_frontend
      - *wait_for_frontend
      - run:
          name: Split tests for parallelisation
          command: |
            # split .features for parallelisation
            FEATURES="$(circleci tests glob "test/acceptance/features/**/*.feature" | circleci tests split)"

            # move groups of .features to folder
            mkdir -p ~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}
            for featureFile in ${FEATURES}; do
              FILENAME_WITH_FOLDER=$(basename $(dirname $featureFile))-$(basename $featureFile)
              mv "$featureFile" ~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}/${FILENAME_WITH_FOLDER}
              printf "including: $(basename $FILENAME_WITH_FOLDER)\n"
            done

            # assign .features folder name to env to pass to cucumber.js
            export FEATURES_FOLDER=~/data-hub-frontend/test/acceptance/features_${CIRCLE_NODE_INDEX}
            printf "Features folder created - ${FEATURES_FOLDER}\n"

            # create cucumber directories
            mkdir -p ~/data-hub-frontend/cucumber/{reports,screenshots}

            # run acceptance tests
            yarn circle:acceptance:dit-staff
          when: always
      - *create_at_reports
      - *store_test_results
      - *store_test_artifacts

  # Run e2e tests for DIT staff
  dit_staff_e2e: &dit_staff_e2e
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_dit_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mi_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend_api
      - *docker_data_hub_backend_celery
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - run: yarn build:prod
      - *start_frontend
      - *wait_for_frontend
      - *create_cucumber_dirs
      - run:
          name: Run DIT e2e tests
          command: yarn test:e2e:dit --browser chrome
      - store_artifacts:
          path: cypress/screenshots

  # Run e2e tests for LEP staff
  lep_staff_e2e: &lep_staff_e2e
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_lep_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mi_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend_api
      - *docker_data_hub_backend_celery
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - run: yarn build:prod
      - *start_frontend
      - *wait_for_frontend
      - *create_cucumber_dirs
      - run:
          name: Run LEP e2e tests
          command: yarn test:e2e:lep --browser chrome
      - store_artifacts:
          path: cypress/screenshots

  # Run e2e tests for DA staff
  da_staff_e2e: &da_staff_e2e
    <<: *at_container_config
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_da_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mi_postgres
      - *docker_mock_sso
      - *docker_data_hub_backend_api
      - *docker_data_hub_backend_celery
    steps:
      - checkout
      - *wait_for_backend
      - *wait_for_mock_sso
      - *restore_yarn_cache
      - run: yarn install --pure-lockfile
      - run: yarn build:prod
      - *start_frontend
      - *wait_for_frontend
      - *create_cucumber_dirs
      - run:
          name: Run DA e2e tests
          command: yarn test:e2e:da --browser chrome
      - store_artifacts:
          path: cypress/screenshots

  # Run acceptance tests for DIT staff using the master version of the backend
  master-dit_staff_at:
    <<: *dit_staff_at
    docker:
      - *docker_data_hub_base
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mi_postgres
      - *docker_mock_sso
      - <<: *docker_data_hub_backend_api
        image: *api_master_image
      - <<: *docker_data_hub_backend_celery
        image: *api_master_image

  # Run acceptance tests for LEP staff using the master version of the backend
  master-lep_staff_e2e:
    <<: *lep_staff_e2e
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_lep_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mi_postgres
      - *docker_mock_sso
      - <<: *docker_data_hub_backend_api
        image: *api_master_image
      - <<: *docker_data_hub_backend_celery
        image: *api_master_image

  # Run acceptance tests for DA staff using the master version of the backend
  master-da_staff_e2e:
    <<: *da_staff_e2e
    docker:
      - <<: *docker_data_hub_base
        environment:
          <<: *data_hub_base_envs
          OAUTH2_DEV_TOKEN: *oauth2_da_staff_token
      - *docker_redis
      - *docker_elasticsearch
      - *docker_postgres
      - *docker_mi_postgres
      - *docker_mock_sso
      - <<: *docker_data_hub_backend_api
        image: *api_master_image
      - <<: *docker_data_hub_backend_celery
        image: *api_master_image

# CircleCI workflows
workflows:
  version: 2
  datahub:
    jobs:
      - dependencies
      - lint_code:
          requires:
            - dependencies
      - unit_tests:
          requires:
            - dependencies
      - unit_client_tests:
          requires:
            - dependencies
      - functional_tests:
          requires:
            - dependencies
      - visual_tests: *common_at_workflow_config
      - dit_staff_at: *common_at_workflow_config
      - dit_staff_e2e: *common_at_workflow_config
      - da_staff_e2e: *common_at_workflow_config
      - lep_staff_e2e: *common_at_workflow_config
      - master-dit_staff_at: *master_common_at_workflow_config
      - master-da_staff_e2e: *master_common_at_workflow_config
      - master-lep_staff_e2e: *master_common_at_workflow_config
