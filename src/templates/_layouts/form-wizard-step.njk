{% extends "_layouts/two-column.njk" %}

{% block local_header %}
  {% set pageTitle = getPageTitle() %}
  {% set heading = heading or pageTitle[0] %}
  {{ LocalHeader({ heading: heading }) }}
{% endblock %}

{% block javascript %}
  <script>
    window.DIT = {
      advisers: {{ ADVISERS | safe }},
    }
  </script>
  {{ super() }}
{% endblock %}

{% block main_grid_right_column %}
  {% block form %}
    {% call MultiStepForm(options | assign({
      buttonText: options.buttonText or 'Continue',
      returnLink: options.backLink,
      errors: errors
    })) %}

      {% block fields %}
        {% for key, fieldOptions in options.fields %}
          {% set props = {} | assign(fieldOptions, {
            name: key,
            label: translate(fieldOptions.label),
            hint: translate(fieldOptions.hint),
            value: values[key],
            error: errors[key].message
          }) %}

          {% if props.fieldType %}
            {% if props.repeatable %}
              {% set fieldValues = values[key] if values[key].length else [''] %}
              {% set addButtonText = props.addButtonText or 'Add another' %}
              {% set removeButtonText = props.removeButtonText or 'Remove' %}
              {% set canRemove = props.canRemove | default(true) %}

              <div
                class="js-AddItems"
                data-item-selector=".c-form-group--AddItem"
                data-item-name="adviser"
                {% if canRemove %}
                data-can-remove-all
                {% else %}
                data-can-remove="false"
                {% endif %}
              >
                {% call FormGroup({} | assign(props, {
                  element: 'fieldset',
                  label: translate(props.legend),
                  hint: translate(props.hint)
                })) %}
                  {% for value in fieldValues %}
                    {% set removeButton %}
                      <button class="button button--link c-form-group__action js-AddItems__remove" name="remove-item" value="{{ key }}::{{ loop.index0 }}">
                        {{ translate(removeButtonText) }}
                      </button>
                    {% endset %}

                    {{ callAsMacro(props.fieldType)({} | assign(props, {
                      idSuffix: loop.index,
                      value: value,
                      optional: false,
                      label: props.label + " " + loop.index,
                      modifier: ['compact', 'AddItem'],
                      isLabelHidden: true,
                      groupClass: 'js-AddItems__item',
                      innerHTML: removeButton if canRemove
                    })) }}
                  {% endfor %}
                {% endcall %}

                <p class="c-form-group c-form-group--compact">
                  <button class="button button--secondary js-AddItems__add" name="add-item" value="{{ key }}">
                    {{ translate(addButtonText) }}
                  </button>
                </p>
              </div>
            {% else %}
              {{ callAsMacro(props.fieldType)(props) }}
            {% endif %}

            {% if props.supportingContent %}
              {# TODO: Replace with a details/summary element using the question a user may be asking as the summary #}
              {% call Message({ type: 'muted' }) %}
                {{ translate(props.supportingContent) }}
              {% endcall %}
            {% endif %}
          {% endif %}
        {% endfor %}
      {% endblock %}

    {% endcall %}
  {% endblock %}
{% endblock %}
