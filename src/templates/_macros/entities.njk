{##
 # Render entity component
 # @param {object} props
 # @param {string} props.id - entity id
 # @param {string} props.name - entity name
 # @param {string} props.type - entity type (e.g. 'date' to format dates)
 # @param {array}  [props.metaBadges{}] - an array of metadata item objects
 # @param {array}  [props.metaItems{}] - an array of metadata item objects
 # @param {string} [props.highlightTerm] - text to use to apply highlight filter
 #}
{% macro Entity (props) %}
  {% if props.name and props.id and props.type %}
    {% set metaBadges = props.meta | filter(['type', 'badge']) %}
    {% set metaTimes = props.meta | filter(['type', 'time']) %}
    {% set metaItems = props.meta
      | reject(['type', 'badge'])
      | reject(['type', 'time'])
    %}

    <div class="c-entity c-entity--{{ props.type }}">
      {% if props.code %}
        <div class="c-entity__code">{{ props.code | highlight(props.highlightTerm, true) }}</div>
      {% endif %}

      <div class="c-entity__header">
        <h3 class="c-entity__title">
          <a href="/{{ props.type | pluralise }}/{{ props.id }}">{{ props.name | highlight(props.highlightTerm) }}</a>
        </h3>

        {% if metaBadges | length %}
          <div class="c-entity__badges">
            {{
              MetaList({
                items: metaBadges,
                highlightTerm: props.highlightTerm,
                modifier: 'inline'
              })
            }}
          </div>
        {% endif %}
      </div>

      {% if metaItems | length %}
        <div class="c-entity__content">
          {{
            MetaList({
              items: metaItems,
              highlightTerm: props.highlightTerm,
              modifier: ['inline', 'split']
            })
          }}
        </div>
      {% endif %}
    </div>
  {% endif %}
{% endmacro %}

{##
 # Render meta data item
 # @param {object} props
 # @param {string} props.label - metadata item label
 # @param {string} props.data - metadata item data
 # @param {string} props.data.id - API data id
 # @param {string} props.data.name - API data label
 # @param {string} [props.type] - value type (e.g. 'date' to format dates)
 # @param {string} [props.url] - link URL
 # @param {string} [props.isSelected] - whether the anchor should be have 'is-selected' state
 # @param {string} [props.isInert] - whether the value should be inert even if it has URL
 # @param {string} [props.isLabelHidden=false] - whether the label should be visually hidden
 # @param {string} [props.badgeModifier] - modifier for badge
 # @param {string} [props.highlightTerm] - text to use to apply highlight filter
 #}
{% macro _MetaItem (props) %}
  {% set badgeModifier = props.badgeModifier | concat('') | reverse | join(' c-badge--') if props.badgeModifier %}
  {% set isLabelHidden = props.isLabelHidden | default(false) %}
  {% set itemValueClass = 'c-badge ' + badgeModifier if props.type === 'badge' else 'c-meta-list__item-value'%}

  {% if props.type %}
    {% if props.type === 'date' %}
      {% set date = props.value | formatDate %}
    {% elif props.type === 'datetime' %}
      {% set date = props.value | formatDate('DD/MM/YYYY, HH:MMa') %}
    {% endif %}
  {% endif %}

  {% set metaItemValue = date or props.value.name | default(props.value)  %}

  {% if metaItemValue %}
    <div class="{{ 'c-meta-list__item' | applyClassModifiers(props.modifier) }}">
      {% if props.label %}
        <span class="c-meta-list__item-label {{ 'u-visually-hidden' if isLabelHidden or props.type === 'badge' }}">
          {{ props.label }}:
        </span>
      {% endif %}
      {% if props.url and not props.isInert %}
        <a
          class="js-xhr {{ itemValueClass }} {{ 'is-selected' if props.isSelected }}"
          href="{{ props.url }}"
        >
          {{- metaItemValue  | highlight(props.highlightTerm, true) -}}
        </a>
      {% else %}
        <span class="{{ itemValueClass }}">{{ metaItemValue | highlight(props.highlightTerm, true) }}</span>
      {% endif %}
    </div>
  {% endif %}
{% endmacro %}

{##
 # Render meta list
 # @param {object} props
 # @param {array}  props.items - meta items
 # @param {string, array} [props.modifier] - meta container modifier (e.g. inline)
 #}
{% macro MetaList (props) %}
  {% set modifier = props.modifier | concat('') | reverse | join(' c-meta-list--') if props.modifier %}

  {% if props.items | length %}
    <div class="c-meta-list {{ modifier }}">
      {% for metaItem in props.items %}
        {{ _MetaItem(metaItem | assign({ highlightTerm: props.highlightTerm, modifier: props.itemModifier })) }}
      {% endfor %}
    </div>
  {% endif %}
{% endmacro %}


{##
 # Render entity component
 # @param {object} props
 # @param {string} props.name - entity name
 # @param {array}  [props.metaItems{}] - an array of metadata item objects
 # @param {string} [props.highlightTerm] - text to use to apply highlight filter
 #}
{% macro PlainEntity (props) %}
  {% set metaItems = props.meta %}

  <div class="c-entity c-entity--anonymous}">
    {% if props.code %}
      <div class="c-entity__code">{{ props.code | highlight(props.highlightTerm, true) }}</div>
    {% endif %}

    <div class="c-entity__header">
      <h3 class="c-entity__title">{{ props.name | highlight(props.highlightTerm) }}</h3>
    </div>

    {% if metaItems | length %}
      <div class="c-entity__content">
        {{
          MetaList({
            items: metaItems,
            highlightTerm: props.highlightTerm,
            modifier: ['inline', 'split']
          })
        }}
      </div>
    {% endif %}
  </div>
{% endmacro %}
