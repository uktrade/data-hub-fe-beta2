{% from './common.njk' import Pagination %}
{% from './entities.njk' import Entity, PlainEntity %}
{% from './form.njk' import Form, MultipleChoiceField, TextField %}

{##
 # Render collection filters form
 # @param {object} props - component props
 # @param {array}  props.filtersFields - an array of filters macro configurations
 # @param {text}   [props.heading=Filter results] - filters heading text
 # @param {object} [props.query] - query object used to include existing state
#}
{% macro CollectionFilters(props) %}
  {% set heading = props.heading | default('Filter results') %}

  {% if props.filtersFields | removeNilAndEmpty | length %}
    {% call Form({
      method: 'get',
      class: 'c-collection-filters js-AutoSubmit',
      buttonText: 'Refresh results',
      actionsClass: 'u-js-hidden',
      hiddenFields: props.query | pick(['sortby']) | assign({ custom: true })
    }) %}
      <header class="u-clearfix">
        <h2 class="c-collection-filters__heading">{{ heading }}</h2>
      </header>

      {{ renderAsMacro(props.filtersFields) }}
    {% endcall %}
  {% endif %}
{% endmacro %}

{##
 # Render collection header
 # @param {object}   props - component props
 # @param {string}   [props.count] - result count
 # @param {string}   [props.countLabel=result] - text to show next to count (singular)
 # @param {function} [props.buildQuery] - buidlQuery function defined on global locals
 # @param {object}   [props.selectedFilters] - an object containing selected filters
 # @param {object}   [props.sortForm] - object containing sorting form
 # @param {string}   [props.highlightTerm] - text to highlight
 # @param {string}   [props.actionsHTML] - HTML content for actions block
#}
{% macro _CollectionHeader(props) %}
  {% set buildQuery = buildQuery or props.buildQuery %}
  {% set el = props.el | default('div') %}
  {% set count = props.count | default('0') %}
  {% set countLabel = props.countLabel | default('result') %}

  <header class="c-collection__header">
    <div class="c-collection__header-row">
      <div class="c-collection__header-intro">
        <span class="c-collection__result-count">{{ count | formatNumber }}</span>
        {{ countLabel | pluralise(count) }}
        {% if props.highlightTerm or selectedFilters | length %}
          matching
          {% if props.highlightTerm %}
            <span class="u-highlight">{{ props.highlightTerm }}</span>
          {% endif %}
        {% endif %}
      </div>
      {% if props.selectedFilters | length > 1 or props.actionsHTML %}
        <div class="c-collection__header-actions">
          {% if props.selectedFilters | length > 1 %}
            <a
              href="?{{ buildQuery({}, { custom: true, sortby: props.sortForm.children[0].value }) }}"
              class="c-collection__filter-remove-all u-float-right js-xhr"
              aria-label="Reset filter results"
            >
              Remove all filters
            </a>
          {% endif %}

          {{ props.actionsHTML | safe }}
        </div>
      {% endif %}

      {% if props.selectedFilters | length %}
        <div class="c-collection__filter-summary">
          {% for name, filter in props.selectedFilters %}
            <span class="c-collection__filter-tag">
              <span class="c-collection__filter-label">{{ filter.label }}</span>
              <span class="c-collection__filter-value">
                {%- if 'date' in name -%}
                  {{ filter.valueLabel | formatDate }}
                {%- else -%}
                  {{ filter.valueLabel }}
                {%- endif -%}
              </span>
              <a
                class="c-collection__filter-remove js-xhr"
                href="?{{ buildQuery(props.query, { custom: true }, [name]) }}"
                aria-label="Remove filter"
              >Ã—</a>
            </span>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    {% if props.sortForm or props.pagination %}
      <div class="c-collection__header-row">
        {% if props.pagination %}
          <span class="c-collection__pagination-summary">
            Page {{ props.pagination.currentPage }} of {{ props.pagination.totalPages }}
          </span>
        {% endif %}

        {{ Form(props.sortForm) if props.sortForm }}
      </div>
    {% endif %}

  </header>
{% endmacro %}

{##
 # Render collection component
 # @param {object}  [props] - component props
 # @param {array{}} [props.id] - collection element id
 # @param {array{}} [props.items] - collection items
 # @param {object}  [props.pagination] - collection pagination
 # @param {object}  [props.selectedFilters] - object containing filters configuration
 # @param {object}  [props.sortForm] - object containing sorting form
 # @param {string}  [props.highlightTerm] - text to use to apply highlight filter
 # @param {string}  [props.summaryActionsHTML] - HTML content for actions block
 # @param {bool}    [props.plainList] - Use a simplified list without support for badges or links
#}
{% macro Collection(props) %}
  <article class="c-collection" {% if props.id %}id="{{ props.id }}"{% endif %}>
    {{ _CollectionHeader(props | assign({ actionsHTML: props.summaryActionsHTML })) }}
    {% if props.items | length %}
      <ol class="c-entity-list">
        {% for item in props.items %}
          <li class="c-entity-list__item">
            {% if props.plainList %}
              {{ PlainEntity(item | assign({ highlightTerm: props.highlightTerm })) }}
            {% else %}
              {{ Entity(item | assign({ highlightTerm: props.highlightTerm })) }}
            {% endif %}
          </li>
        {% endfor %}
      </ol>
    {% endif %}

    {{ Pagination(props.pagination) }}
  </article>
{% endmacro %}
